!!!Done!!! ABCD     Add BCD with extend                Dx,Dy      B--        * U * U *
                                         -(Ax),-(Ay)
!!!Done!!! ADD      ADD binary                         Dn,< ea >  BWL        * * * * *
                                        < ea >,Dn
!!!Done!!! ADDA     ADD binary to An               < ea >,An      -WL        - - - - -
!!!Done!!! ADDI     ADD Immediate                      #x,< ea >  BWL        * * * * *
!!!Done!!! ADDQ     ADD 3-bit immediate            #<1-8>,< ea >  BWL        * * * * *
!!!Done!!! ADDX     ADD eXtended                       Dy,Dx      BWL        * * * * *
                                         -(Ay),-(Ax)
!!!Done!!! AND      Bit-wise AND                   < ea >,Dn      BWL        - * * 0 0
                                            Dn,< ea >
!!!Done!!! ANDI     Bit-wise AND with Immediate  #< data>,< ea >  BWL        - * * 0 0
!!!Done!!! ASL      Arithmetic Shift Left          #<1-8>,Dy      BWL        * * * * *
                                            Dx,Dy
                                        < ea >
!!!Done!!! ASR      Arithmetic Shift Right              ...       BWL        * * * * *
!!!Done!!! Bcc      Conditional Branch            Bcc.S < label>  BW-        - - - - -
                                       Bcc.W < label>
!!!Done!!! BCHG     Test a Bit and ChanGe              Dn,< ea >  B-L        - - * - -
                                      #< data>,< ea >
!!!Done!!! BCLR     Test a Bit and CLEAR                ...       B-L        - - * - -
!!!Done!!! BSET     Test a Bit and SET                  ...       B-L        - - * - -
!!!Done!!! BSR      Branch to SubRoutine          BSR.S < label>  BW-        - - - - -
                                       BSR.W < label>
!!!Done!!! BTST     Bit TeST                           Dn,< ea >  B-L        - - * - -
                                      #< data>,< ea >
!!!Done!!! CHK      CHecK Dn Against Bounds        < ea >,Dn      -W-        - * U U U
!!!Done!!! CLR      CLEAR                          < ea >         BWL        - 0 1 0 0
!!!Done!!! CMP      CoMPare                        < ea >,Dn      BWL        - * * * *
!!!Done!!! CMPA     CoMPare Address                < ea >,An      -WL        - * * * *
!!!Done!!! CMPI     CoMPare Immediate            #< data>,< ea >  BWL        - * * * *
!!!Done!!! CMPM     CoMPare Memory                  (Ay)+,(Ax)+   BWL        - * * * *
!!!Done!!! DBcc     Looping Instruction           DBcc Dn,< label>-W-        - - - - -
DIVS     DIVide Signed                  < ea >,Dn      -W-        - * * * 0
DIVU     DIVide Unsigned                < ea >,Dn      -W-        - * * * 0
EOR      Exclusive OR                       Dn,< ea >  BWL        - * * 0 0
EORI     Exclusive OR Immediate       #< data>,< ea >  BWL        - * * 0 0
EXG      Exchange any two registers         Rx,Ry      --L        - - - - -
EXT      Sign EXTend                        Dn         -WL        - * * 0 0
ILLEGAL  ILLEGAL-Instruction Exception     ILLEGAL                - - - - -
JMP      JuMP to Affective Address      < ea >                    - - - - -
JSR      Jump to SubRoutine             < ea >                    - - - - -
!!!Done!!! LEA      Load Effective Address         < ea >,An      --L        - - - - -
LINK     Allocate Stack Frame               An,#< displacement>   - - - - -
!!!Done!!! LSL      Logical Shift Left                 Dx,Dy      BWL        * * * 0 *
                                        #<1-8>,Dy
                                        < ea >
!!!Done!!! LSR      Logical Shift Right                 ...       BWL        * * * 0 *
!!!Done!!! MOVE     Between Effective Addresses    < ea >,< ea >  BWL        - * * 0 0
!!!Done!!! MOVE     To CCR                         < ea >,CCR     -W-        I I I I I
!!!Done!!! MOVE     To SR                          < ea >,SR      -W-        I I I I I
!!!Done!!! MOVE     From SR                            SR,< ea >  -W-        - - - - -
!!!Done!!! MOVE     USP to/from Address Register      USP,An      --L        - - - - -
                                            An,USP
!!!Done!!! MOVEA    MOVE Address                   < ea >,An      -WL        - - - - -
!!!Done!!! MOVEM    MOVE Multiple         <register list>,< ea >  -WL        - - - - -
                                          < ea >,<register list>
MOVEP    MOVE Peripheral                    Dn,x(An)   -WL        - - - - -
                                         x(An),Dn
!!!Done!!! MOVEQ    MOVE 8-bit immediate     #<-128.+127>,Dn      --L        - * * 0 0
MULS     MULtiply Signed                < ea >,Dn      -W-        - * * 0 0
MULU     MULtiply Unsigned              < ea >,Dn      -W-        - * * 0 0
NBCD     Negate BCD                     < ea >         B--        * U * U *
NEG      NEGate                         < ea >         BWL        * * * * *
NEGX     NEGate with eXtend             < ea >         BWL        * * * * *
!!!Done!!! NOP      No OPeration                       NOP                   - - - - -
NOT      Form one's complement          < ea >         BWL        - * * 0 0
OR       Bit-wise OR                    < ea >,Dn      BWL        - * * 0 0
                                            Dn,< ea >
ORI      Bit-wise OR with Immediate   #< data>,< ea >  BWL        - * * 0 0
PEA      Push Effective Address         < ea >         --L        - - - - -
RESET    RESET all external devices        RESET                  - - - - -
ROL      ROtate Left                    #<1-8>,Dy      BWL        - * * 0 *
                                            Dx,Dy
                                        < ea >
ROR      ROtate Right                        ...       BWL        - * * 0 *
!!!Done!!! ROXL     ROtate Left with eXtend             ...       BWL        * * * 0 *
!!!Done!!! ROXR     ROtate Right with eXtend            ...       BWL        * * * 0 *
RTE      ReTurn from Exception               RTE                  I I I I I
RTR      ReTurn and Restore                  RTR                  I I I I I
!!!Done!!! RTS      ReTurn from Subroutine              RTS                  - - - - -
SBCD     Subtract BCD with eXtend           Dx,Dy      B--        * U * U *
                                         -(Ax),-(Ay)
Scc      Set to -1 if True, 0 if False  < ea >         B--        - - - - -
STOP     Enable & wait for interrupts     #< data>                I I I I I
SUB      SUBtract binary                    Dn,< ea >  BWL        * * * * *
                                        < ea >,Dn
SUBA     SUBtract binary from An        < ea >,An      -WL        - - - - -
SUBI     SUBtract Immediate                 #x,< ea >  BWL        * * * * *
!!!Done!!! SUBQ     SUBtract 3-bit immediate     #< data>,< ea >  BWL        * * * * *
SUBX     SUBtract eXtended                  Dy,Dx      BWL        * * * * *
                                         -(Ay),-(Ax)
SWAP     SWAP words of Dn                   Dn         -W-        - * * 0 0
TAS      Test & Set MSB & Set N/Z-bits  < ea >         B--        - * * 0 0
TRAP     Execute TRAP Exception            #< vector>             - - - - -
TRAPV    TRAPV Exception if V-bit Set       TRAPV                 - - - - -
!!!Done!!! TST      TeST for negative or zero      < ea >         BWL        - * * 0 0
UNLK     Deallocate Stack Frame             An                    - - - - -